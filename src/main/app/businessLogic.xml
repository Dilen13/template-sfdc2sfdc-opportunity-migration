<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
xmlns:json="http://www.mulesoft.org/schema/mule/json"
xmlns:spring="http://www.springframework.org/schema/beans" 
version="EE-3.5.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">

 <batch:job name="migrateOpportunitiesBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <sfdc:query config-ref="SalesforceA" query="dsql:SELECT LastModifiedDate, Name, Amount, StageName, Probability, CloseDate FROM Opportunity WHERE Amount &gt; 5000" doc:name="query Opportunities from Salesforce instance A" fetchSize="${page.size}"/>
        </batch:input> 
        <batch:process-records>
            <batch:step name="getOpportunityInBStep">
                <logger message="Query: #[payload]" level="INFO" doc:name="Logger"/>
                <enricher source="#[payload]" target="#[recordVars['opportunityInB']]" doc:name="store result in record var 'opportunityInB'">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name, LastModifiedDate FROM Opportunity WHERE Name = '#[payload['Name']]'" doc:name="query Opportunity in Salesforce instance B"/>
                </enricher>
            </batch:step>
            <batch:step name="selectNewerOpportunityStep" filter-expression="#[recordVars['opportunityInB'] is NullPayload]">
                <choice doc:name="Choice">
                    <when expression="#[org.mule.kicks.util.OpportunityDateComparator.isAfter(payload, recordVars['opportunityInB'])]">
                        <expression-component doc:name="define Id in SalesForce Intance B"><![CDATA[payload['Id'] = recordVars['opportunityInB']['Id']]]></expression-component>
                    </when>
                    <otherwise>
                        <set-payload doc:name="set to null to skip this opportunity" value="#[return null]"/>
                    </otherwise>
                </choice>
            </batch:step>
            <batch:step name="createOpportunitiesInBStep" filter-expression="#[payload is NullPayload]">
                <expression-component doc:name="remove field LastModifiedDate"><![CDATA[payload.remove('LastModifiedDate');]]></expression-component>
                <expression-component doc:name="changing type of field Amount to double"><![CDATA[if (payload.get('Amount') == null) {
	payload.remove('Amount') 
} else {
	double doubleAmount = Double.parseDouble(payload.get('Amount'));
	payload.put('Amount', doubleAmount);
}

if (payload.get('CloseDate') == null) {
	payload.remove('CloseDate') 
} else {
	java.util.Date dateCloseDate = new java.text.SimpleDateFormat("yyyy-MM-dd").parse(payload.get('CloseDate'));
	payload.put('CloseDate', dateCloseDate);
}]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
					<sfdc:upsert config-ref="SalesforceB"  type="Opportunity" doc:name="upsert Opportunities in org B" externalIdFieldName="Id">
                        <sfdc:objects ref="#[payload]"/>
					</sfdc:upsert>
                    <logger message="Upsert result: #[payload]" level="INFO" doc:name="log Upsert result"/>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <all doc:name="All">
                <processor-chain>
            		<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
            		<logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
                </processor-chain>
				<processor-chain>
                	<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
					<smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" connector-ref="gmailConnector" doc:name="send mail"/>
				</processor-chain>
            </all>
        </batch:on-complete>
    </batch:job>
   
    <flow name="mainFlow" doc:name="mainFlow" processingStrategy="synchronous" doc:description="This flow is the entry point to the Kick business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Kick exposes to trigger it.

">
        <batch:execute name="migrateOpportunitiesBatch" doc:name="trigger migrateOpportunitiesBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
</mule>
